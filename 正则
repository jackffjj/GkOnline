re:匹配规则，match（），search（），findall(),sub(),compile()
1.匹配规则：
模式 描述
\w 匹配字母、数字及下划线
\W 匹配不是字母、数字及下划线的字符
\s 匹配任意空白字符，等价于[\t\n\r\f]
\S 匹配任意非空字符
\d 匹配任意数字，等价于[0-9]
\D 匹配任意非数字的字符
\A 匹配字符串开头
\Z 匹配字符串结尾，如果存在换行，只匹配到换行前的结束字符串
\z 匹配字符串结尾，如果存在换行，同时还会匹配换行符
\G 匹配最后匹配完成的位置
\n 匹配一个换行符
\t 匹配一个制表符
^ 匹配一行字符串的开头
$ 匹配一行字符串的结尾
. 匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符
[...] 用来表示一组字符，单独列出，比如[amk]匹配a、m或k
[^...] 不在[]中的字符，比如[^abc]匹配除了a、b、c之外的字符
* 匹配0个或多个表达式
+ 匹配1个或多个表达式
? 匹配0个或1个前面的正则表达式定义的片段，非贪婪方式
{n} 精确匹配n个前面的表达式
{n, m} 匹配n到m次由前面正则表达式定义的片段，贪婪方式
a∣b 匹配a或b
( ) 匹配括号内的表达式，也表示一个组
2.match()向它传入要匹配的字符串以及正则表达式，就可以检测这个正则表达式是否匹配字符串。
import re
content = 'Hello 123 4567 World_This is a Regex Demo'
# print(len(content))
result = re.match('Hello\s\d\d\d\s\d{4}\sWorld',content)
# print(result)
print(result.group())#group()方法可以输出匹配到的内容
print(result.span())#span()方法可以输出匹配的范围
Hello 123 4567 World
(0, 20)

3.
import re
content = 'Hello 123 4567 World_This is a Regex Demo'
print(len(content))
result = re.match('Hello.*Demo$',content)
print(result)
print(result.group())#group()方法可以输出匹配到的内容
print(result.span())#span()方法可以输出匹配的范围

41
<_sre.SRE_Match object; span=(0, 41), match='Hello 123 4567 World_This is a Regex Demo'>
Hello 123 4567 World_This is a Regex Demo
(0, 41)

4.
在贪婪匹配下，.*会匹配尽可能多的字符。正则表达式中.*后面是\d+，也就是至少一个数字，并没有指定具体多少个数字，因此，.*就尽可能匹配多的字符
但这里需要注意，如果匹配的结果在字符串结尾，.*?就有可能匹配不到任何内容了，因为它会匹配尽可能少的字符
import re
content = 'Hello 1234567435 World_This is a Regex Demo'
result = re.match('^He.*?(\d+).*?Demo$',content)
print(result.group(1))
输出5
和
import re
content = 'Hello 1234567 World_This is a Regex Demo'
result = re.match('^He.*?(\d+).*?Demo$', content)
print(result.group())
print(result.group(1))
输出：
Hello 1234567 World_This is a Regex Demo
1234567
5.修饰符
import re
content = '''Hello 1234567 World_This is a
Regex Demo'''
result = re.match('he.*?(\d+).*?demo$', content,re.S|re.I)
print(result.group())
输出：
Hello 1234567 World_This is a
Regex Demo
修饰符 描述
re.I 使匹配对大小写不敏感
re.L 做本地化识别（locale-aware）匹配
re.M 多行匹配，影响^和$
re.S 使.匹配包括换行在内的所有字符
re.U 根据Unicode字符集解析字符。这个标志影响\w、\W、 \b和\B
re.X 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解
6.转义匹配
import re 
content = '(百度)www.baid\wu.com \w ccdd'
result = re.match('\(百度\).*?\s\\\\w\sccdd', content)
print(result.group())
输出：(百度)www.baid\wu.com \w ccdd
7.search
match()方法是从字符串的开头开始匹配的，一旦开头不匹配，那么整个匹配就失败了。search()方法，它在匹配时会扫描整个字符串，然后返回第一个成功匹配的结果。
import re
html = '''<div id="songs-list">
    <h2 class="title">经典老歌</h2>
    <p class="introduction">
        经典老歌列表
    </p>
    <ul id="list" class="list-group">
        <li data-view="2">一路上有你</li>
        <li data-view="7">
            <a href="/2.mp3" singer="任贤齐">沧海一声笑</a>
        </li>
        <li data-view="4" class="active">
            <a href="/3.mp3" singer="齐秦">往事随风</a>
        </li>
        <li data-view="6"><a href="/4.mp3" singer="beyond">光辉岁月</a></li>
        <li data-view="5"><a href="/5.mp3" singer="陈慧琳">记事本</a></li>
        <li data-view="5">
            <a href="/6.mp3" singer="邓丽君"><i class="fa fa-user"></i>但愿人长久</a>
        </li>
    </ul>
</div>'''

r1 = re.search('<li.*?singer="(.*?)">(.*?)</a>',html,re.S)
r2 = re.search('<li.*?active.*?singer="(.*?)">(.*?)</a>',html,re.S)
r3 = re.search('<li.*?/6.*?singer="(.*?)">.*?</i>(.*?)</a>',html,re.S)
print(r1.group(1),r1.group(2))
print(r2.group(1),r2.group(2))
print(r3.group(1),r3.group(2))
输出：
任贤齐 沧海一声笑
齐秦 往事随风
邓丽君 但愿人长久
8.search()方法它可以返回匹配正则表达式的第一个内容，但是如果想要获取匹配正则表达式的所有内容，那该怎么办呢？这时就要借助findall()方法了。该方法会搜索整个字符串，然后返回匹配正则表达式的所有内容。
import re

html = '''<div id="songs-list">
    <h2 class="title">经典老歌</h2>
    <p class="introduction">
        经典老歌列表
    </p>
    <ul id="list" class="list-group">
        <li data-view="2">一路上有你</li>
        <li data-view="7">
            <a href="/2.mp3" singer="任贤齐">沧海一声笑</a>
        </li>
        <li data-view="4" class="active">
            <a href="/3.mp3" singer="齐秦">往事随风</a>
        </li>
        <li data-view="6"><a href="/4.mp3" singer="beyond">光辉岁月</a></li>
        <li data-view="5"><a href="/5.mp3" singer="陈慧琳">记事本</a></li>
        <li data-view="5">
            <a href="/6.mp3" singer="邓丽君">但愿人长久</a>
        </li>
    </ul>
</div>'''

results = re.findall('<li.*?>\s*(<a.*?>)?(.*?)<', html, re.S)
print(results)
for result in results:
    print(result[1])
输出：
[('', '一路上有你'), ('<a href="/2.mp3" singer="任贤齐">', '沧海一声笑'), ('<a href="/3.mp3" singer="齐秦">', '往事随风'), ('<a href="/4.mp3" singer="beyond">', '光辉岁月'), ('<a href="/5.mp3" singer="陈慧琳">', '记事本'), ('<a href="/6.mp3" singer="邓丽君">', '但愿人长久')]
一路上有你
沧海一声笑
往事随风
光辉岁月
记事本
但愿人长久
9.
compile()方法，这个方法可以将正则字符串编译成正则表达式对象，以便在后面的匹配中复用
import re
content = '''Hello 1234567 World_This is a
Regex Demo'''
pattern = re.compile('^He.*?(\d+).*Demo$',re.S)
result = re.search(pattern, content)
print(result.group(1))
1234567
